version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@3.0.0
  aws-cli: circleci/aws-cli@5.1.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7
  docker-terraform:
    docker:
      - image: hashicorp/terraform:latest
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Node.js
          command: |
            curl -sL https://deb.nodesource.com/setup_13.x | bash -
            apt-get update && apt-get install -y nodejs
      - run:
          name: Install serverless CLI
          command: npm i -g serverless
      - run:
          name: Build lambda
          command: |
            cd ./LBHFSSPublicAPI/
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd ./LBHFSSPublicAPI/
            sls deploy --stage <<parameters.stage>> --conceal
  migrate-database:
    description: "Migrate database"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - run:
          name: Install Unzip
          command: apt-get update && apt-get install unzip
      - run:
          name: Install AWS CLI
          command: |
            curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip awscliv2.zip
            ./aws/install
      - run:
          name: Install Session Manager plugin
          command: |
            curl "https://s3.amazonaws.com/session-manager-downloads/plugin/latest/ubuntu_64bit/session-manager-plugin.deb" -o "session-manager-plugin.deb"
            dpkg -i session-manager-plugin.deb
      - run:
          name: Install dotnet ef core
          command: dotnet tool install dotnet-ef --tool-path ./dotnet-ef-local/
      - run:
          name: SSH into RDS and migrate database
          command: |
            aws ssm get-parameter --name "/platform-apis-jump-box-pem-key" --output text --query Parameter.Value > ./private-key.pem
            chmod 400 ./private-key.pem
            HOST=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/postgres-hostname --query Parameter.Value)
            PORT=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/postgres-port --query Parameter.Value)
            INSTANCE_NAME=$(aws ssm get-parameter --name /platform-apis-jump-box-instance-name --query Parameter.Value)
            ssh -4 -i ./private-key.pem -Nf -M -L 6000:${HOST//\"}:${PORT//\"} -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" -o ProxyCommand="aws ssm start-session --target %h --document AWS-StartSSHSession --parameters portNumber=%p --region=eu-west-2" ec2-user@${INSTANCE_NAME//\"}
            PASSWORD=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/postgres-password --query Parameter.Value)
            USERNAME=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/postgres-username --query Parameter.Value)
            DATABASE=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/postgres-database --query Parameter.Value)
            ADDRESSES_URL=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/addresses-api-base-url --query Parameter.Value)
            ADDRESSES_KEY=$(aws ssm get-parameter --name /fss-public-api/<<parameters.stage>>/addresses-api-key --query Parameter.Value)
            ADDRESSES_API_TOKEN=$(aws ssm get-parameter --name /fss-common-api/<<parameters.stage>>/addresses-api-token --query Parameter.Value)
            CONN_STR="Host=localhost;Password=${PASSWORD};Port=6000;Username=${USERNAME};Database=${DATABASE}"
            cd ./LBHFSSPublicAPI/
            ADDRESSES_API_BASE_URL=${ADDRESSES_URL} ADDRESSES_API_KEY=${ADDRESSES_KEY} ADDRESSES_API_TOKEN=${ADDRESSES_API_TOKEN} CONNECTION_STRING=${CONN_STR} ./../dotnet-ef-local/dotnet-ef database update
  deploy-terraform:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -auto-approve
  preview-terraform:
    description: "Previews terraform configuration changes"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
            # if [ "<<parameters.environment>>" = "development" ]
            # then
            #   echo "replace provider"
            #   terraform state replace-provider registry.terraform.io/-/aws hashicorp/aws
            # fi
            terraform plan
          name: preview terraform
  reviewable-console-changes:
    description: "Copy an existing db snapshot & add encryption to it."
    steps:
      - *attach_workspace
      - aws-cli/install
      - run:
          name: copy a database snapshot w encryption
          command: |
            default_kms_id=$(aws kms list-aliases --query "Aliases[?contains(AliasName, 'aws/rds')].TargetKeyId | [0]" | sed 's/"//g')

            snapshot_to_copy_arn=$(aws rds describe-db-snapshots --query "DBSnapshots[?DBSnapshotIdentifier == 'fss-public-staging-db-staging-manual-snapshot'].DBSnapshotArn | [0]" | sed 's/"//g')

            aws rds copy-db-snapshot \
              --source-db-snapshot-identifier $snapshot_to_copy_arn \
              --target-db-snapshot-identifier 'fss-public-staging-db-staging-manual-snapshot-w-encryption' \
              --source-region 'eu-west-2' \
              --copy-tags \
              --no-copy-option-group \
              --kms-key-id $default_kms_id
  reviewable-snapshot-restore:
    description: "Restore an FSS database from snapshot with encryption."
    steps:
      - *attach_workspace
      - aws-cli/install
      - run:
          name: restore database from snapshot
          command: |
            SECURITY_GROUP_ID=$(aws ec2 describe-security-groups --query "SecurityGroups[?Contains(GroupName,'allow_fsspublicstaging_db')].GroupId | [0]")
            echo $SECURITY_GROUP_ID

jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker-compose build fss-public-api-test
      - run:
          name: Run tests
          command: docker-compose run -e ADDRESSES_API_BASE_URL -e ADDRESSES_API_KEY -e ADDRESSES_API_TOKEN --rm fss-public-api-test
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"
  migrate-database-development:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "development"
  migrate-database-staging:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "staging"
  migrate-database-production:
    executor: docker-dotnet
    steps:
      - migrate-database:
          stage: "production"
  deploy-development-terraform:
    executor: docker-terraform
    steps:
      - deploy-terraform:
          environment: "development"
  deploy-staging-terraform:
    executor: docker-terraform
    steps:
      - deploy-terraform:
          environment: "staging"
  deploy-production-terraform:
    executor: docker-terraform
    steps:
      - deploy-terraform:
          environment: "production"
  preview-development-terraform:
    executor: docker-terraform
    steps:
      - preview-terraform:
          environment: "development"
  preview-staging-terraform:
    executor: docker-terraform
    steps:
      - preview-terraform:
          environment: "staging"
  preview-production-terraform:
    executor: docker-terraform
    steps:
      - preview-terraform:
          environment: "production"
  reviewable-cli-job:
    executor: aws-cli/default
    steps:
      - reviewable-console-changes
  reviewable-snapshot:
    executor: aws-cli/default
    steps:
      - reviewable-snapshot-restore

workflows:
  feature:
    jobs:
      - check-code-formatting:
          filters:
            branches:
              ignore:
                - develop
                - master
      - build-and-test:
          context: find-support-services-public-api-context
          requires:
            - check-code-formatting
          filters:
            branches:
              ignore:
                - develop
                - master
      - assume-role-development:
          context: api-assume-role-development-context
          filters:
            branches:
              ignore:
                - develop
                - master
      - preview-development-terraform:
          requires:
            - assume-role-development
          filters:
            branches:
              ignore:
                - develop
                - master
      - assume-role-staging:
          context: api-assume-role-staging-context
          filters:
            branches:
              ignore:
                - develop
                - master
      - reviewable-snapshot:
          requires:
            - assume-role-staging
          filters:
            branches:
              only:
                - fix-staging-drift
      - reviewable-cli-job:
          requires:
            - assume-role-staging
          filters:
            branches:
              only:
                - create-encrypted-staging-snapshot
      - preview-staging-terraform:
          requires:
            - assume-role-staging
          filters:
            branches:
              ignore:
                - develop
                - master
      - assume-role-production:
          context: api-assume-role-production-context
          filters:
            branches:
              ignore:
                - develop
                - master
      - preview-production-terraform:
          requires:
            - assume-role-production
          filters:
            branches:
              ignore:
                - develop
                - master
  check-and-deploy-development:
    jobs:
      - check-code-formatting:
          filters:
            branches:
              only: develop
      - build-and-test:
          context: find-support-services-public-api-context
          requires:
            - check-code-formatting
          filters:
            branches:
              only: develop
      - permit-development-release:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              only: develop
      - assume-role-development:
          context: api-assume-role-development-context
          requires:
            - permit-development-release
          filters:
            branches:
              only: develop
      - migrate-database-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: develop
      - deploy-to-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: develop
  check-and-deploy-staging-and-production:
    jobs:
      - build-and-test:
          context: find-support-services-public-api-context
          filters:
            branches:
              only: master
      - permit-staging-release:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
            - permit-staging-release
          filters:
            branches:
              only: master
      - migrate-database-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - deploy-to-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - permit-production-release:
          type: approval
          requires:
            - deploy-to-staging
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
            - permit-production-release
          filters:
            branches:
              only: master
      - deploy-to-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
      - migrate-database-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
  terraform-release:
    jobs:
      - permit-terraform-development-release:
          type: approval
          filters:
            branches:
              only: develop
      - assume-role-development:
          context: api-assume-role-development-context
          requires:
            - permit-terraform-development-release
          filters:
            branches:
              only: develop
      - deploy-development-terraform:
          requires:
            - assume-role-development
          filters:
            branches:
              only: develop
      - permit-terraform-staging-release:
          type: approval
          filters:
            branches:
              only: master
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
            - permit-terraform-staging-release
          filters:
            branches:
              only: master
      - deploy-staging-terraform:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - permit-terraform-production-release:
          type: approval
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
            - permit-terraform-production-release
          filters:
            branches:
              only: master
      - deploy-production-terraform:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
