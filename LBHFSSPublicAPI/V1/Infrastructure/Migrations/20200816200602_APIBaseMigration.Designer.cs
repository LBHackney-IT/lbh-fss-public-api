// <auto-generated />
using System;
using LBHFSSPublicAPI.V1.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace LBHFSSPublicAPI.V1.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20200816200602_APIBaseMigration")]
    partial class APIBaseMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.Property<int>("RevisionId")
                        .HasColumnName("revision_id")
                        .HasColumnType("integer");

                    b.Property<int?>("RevisionId1")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("RevisionId")
                        .IsUnique()
                        .HasName("services_revision_id_key");

                    b.HasIndex("RevisionId1");

                    b.ToTable("services");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.ServiceLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address1")
                        .HasColumnName("address_1")
                        .HasColumnType("character varying");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying");

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasColumnType("character varying");

                    b.Property<int?>("RevisionId")
                        .HasColumnName("revision_id")
                        .HasColumnType("integer");

                    b.Property<string>("StateProvince")
                        .HasColumnName("state_province")
                        .HasColumnType("character varying");

                    b.Property<int?>("Uprn")
                        .HasColumnName("uprn")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RevisionId");

                    b.ToTable("service_locations");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.ServiceRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AuthorId")
                        .HasColumnName("author_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnName("description")
                        .HasColumnType("character varying");

                    b.Property<string>("Facebook")
                        .HasColumnName("facebook")
                        .HasColumnType("character varying");

                    b.Property<string>("Instagram")
                        .HasColumnName("instagram")
                        .HasColumnType("character varying");

                    b.Property<string>("Linkedin")
                        .HasColumnName("linkedin")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnName("reviewed_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ReviewerMessage")
                        .HasColumnName("reviewer_message")
                        .HasColumnType("text");

                    b.Property<int?>("ReviewerUid")
                        .HasColumnName("reviewer_uid")
                        .HasColumnType("integer");

                    b.Property<int?>("ServiceId")
                        .HasColumnName("service_id")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("SubmittedAt")
                        .HasColumnName("submitted_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Telephone")
                        .HasColumnName("telephone")
                        .HasColumnType("character varying");

                    b.Property<string>("Twitter")
                        .HasColumnName("twitter")
                        .HasColumnType("character varying");

                    b.Property<string>("Website")
                        .HasColumnName("website")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ReviewerUid");

                    b.HasIndex("ServiceId");

                    b.ToTable("service_revisions");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.ServiceTaxonomy", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("RevisionId")
                        .HasColumnName("revision_id")
                        .HasColumnType("integer");

                    b.Property<int?>("TaxonomyId")
                        .HasColumnName("taxonomy_id")
                        .HasColumnType("integer");

                    b.HasIndex("RevisionId");

                    b.HasIndex("TaxonomyId");

                    b.ToTable("service_taxonomies");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("LastAccessAt")
                        .HasColumnName("last_access_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Payload")
                        .HasColumnName("payload")
                        .HasColumnType("text");

                    b.Property<string>("UserAgent")
                        .HasColumnName("user_agent")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("sessions");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.SynonymGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("synonym_groups");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.SynonymWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("GroupId")
                        .HasColumnName("group_id")
                        .HasColumnType("integer");

                    b.Property<string>("Word")
                        .HasColumnName("word")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("synonym_words");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Taxonomy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<int?>("ParentId")
                        .HasColumnName("parent_id")
                        .HasColumnType("integer");

                    b.Property<string>("Vocabulary")
                        .HasColumnName("vocabulary")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("taxonomies");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying");

                    b.Property<string>("Status")
                        .HasColumnName("status")
                        .HasColumnType("character varying");

                    b.Property<string>("SubId")
                        .HasColumnName("sub_id")
                        .HasColumnType("character varying");

                    b.HasKey("Id");

                    b.ToTable("users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2018, 8, 18, 11, 22, 16, 0, DateTimeKind.Unspecified),
                            Email = "jane.doe@blueyonder.co.uk",
                            Name = "Jane Doe",
                            Status = "active",
                            SubId = "cc1b08f5-251c-4152-b367-640411dafd5f"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2019, 3, 11, 15, 42, 55, 0, DateTimeKind.Unspecified),
                            Email = "mark.williams@bighouse.org",
                            Name = "Mark Williams",
                            Status = "active",
                            SubId = "1b86bb42-c1be-40e8-a583-aca0b5df1976"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2020, 4, 30, 14, 36, 32, 0, DateTimeKind.Unspecified),
                            Email = "janet.graham@grcdentists.co.uk",
                            Name = "Janet Graham",
                            Status = "unverified",
                            SubId = "059a2d94-dc90-42b7-bcba-ae453dcf8d76"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2020, 8, 11, 8, 28, 46, 0, DateTimeKind.Unspecified),
                            Email = "ronnie.osullivan@onefourseven.com",
                            Name = "Ronnie O'Sullivan",
                            Status = "verified",
                            SubId = "00a50252-dca9-46fd-80c9-5233b637ef02"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2020, 8, 13, 11, 46, 19, 0, DateTimeKind.Unspecified),
                            Email = "betty.davis@baesystems.co.uk",
                            Name = "Betty Davis",
                            Status = "verified",
                            SubId = "08a88621-f215-436a-912f-64882909c59f"
                        });
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.UserOrganization", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<int?>("OrganizationId")
                        .HasColumnName("organization_id")
                        .HasColumnType("integer");

                    b.HasIndex("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("user_organizations");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.UserRole", b =>
                {
                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Id")
                        .HasColumnName("id")
                        .HasColumnType("integer");

                    b.Property<int?>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("integer");

                    b.HasIndex("RoleId");

                    b.HasIndex("Id", "RoleId")
                        .HasName("user_roles_id_role_id_idx");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Service", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.Organization", "Organization")
                        .WithMany("Services")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("services_organization_id_fkey");

                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.ServiceRevision", "Revision")
                        .WithMany()
                        .HasForeignKey("RevisionId1");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.ServiceLocation", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.ServiceRevision", "Revision")
                        .WithMany("ServiceLocations")
                        .HasForeignKey("RevisionId")
                        .HasConstraintName("service_locations_revision_id_fkey");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.ServiceRevision", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.User", "Author")
                        .WithMany("ServiceRevisionsAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("service_revisions_author_id_fkey");

                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.User", "ReviewerU")
                        .WithMany("ServiceRevisionsReviewerU")
                        .HasForeignKey("ReviewerUid")
                        .HasConstraintName("service_revisions_reviewer_uid_fkey");

                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.Service", "Service")
                        .WithMany("ServiceRevisions")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("service_revisions_service_id_fkey");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.ServiceTaxonomy", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.ServiceRevision", "Revision")
                        .WithMany()
                        .HasForeignKey("RevisionId")
                        .HasConstraintName("service_taxonomies_revision_id_fkey");

                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.Taxonomy", "Taxonomy")
                        .WithMany()
                        .HasForeignKey("TaxonomyId")
                        .HasConstraintName("service_taxonomies_taxonomy_id_fkey");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.Session", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .HasConstraintName("sessions_user_id_fkey");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.SynonymWord", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.SynonymGroup", "Group")
                        .WithMany("SynonymWords")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("synonym_words_group_id_fkey");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.UserOrganization", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.User", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("Id")
                        .HasConstraintName("user_organizations_id_fkey");

                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("user_organizations_organization_id_fkey");
                });

            modelBuilder.Entity("LBHFSSPublicAPI.V1.Infrastructure.UserRole", b =>
                {
                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.User", "IdNavigation")
                        .WithMany()
                        .HasForeignKey("Id")
                        .HasConstraintName("user_roles_id_fkey");

                    b.HasOne("LBHFSSPublicAPI.V1.Infrastructure.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("user_roles_role_id_fkey");
                });
#pragma warning restore 612, 618
        }
    }
}
